"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/upload";
exports.ids = ["pages/api/upload"];
exports.modules = {

/***/ "(api-node)/./lib/chunkMarkdown.ts":
/*!******************************!*\
  !*** ./lib/chunkMarkdown.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkMarkdown: () => (/* binding */ chunkMarkdown)\n/* harmony export */ });\n/**\n * Chunks markdown text into smaller segments based on tokens\n */ function chunkMarkdown(markdownText, maxTokens = 500) {\n    if (!markdownText) return [];\n    // Split by headings to create natural breaks\n    const headingRegex = /(?=^#{1,6}\\s.+$)/gm;\n    let segments = markdownText.split(headingRegex);\n    // Further split large segments\n    const chunks = [];\n    segments.forEach((segment)=>{\n        // Estimate tokens - rough approximation (1 token ~= 4 chars)\n        const estimatedTokens = segment.length / 4;\n        if (estimatedTokens <= maxTokens) {\n            chunks.push(segment.trim());\n        } else {\n            // Split by paragraphs for large segments\n            const paragraphs = segment.split(/\\n\\s*\\n/);\n            let currentChunk = '';\n            paragraphs.forEach((paragraph)=>{\n                const paragraphTokens = paragraph.length / 4;\n                if (currentChunk.length / 4 + paragraphTokens <= maxTokens) {\n                    currentChunk += (currentChunk ? '\\n\\n' : '') + paragraph;\n                } else {\n                    if (currentChunk) {\n                        chunks.push(currentChunk.trim());\n                    }\n                    // If a single paragraph is too large, split it further\n                    if (paragraphTokens > maxTokens) {\n                        const sentences = paragraph.split(/(?<=\\.|\\?|\\!)\\s+/);\n                        currentChunk = '';\n                        sentences.forEach((sentence)=>{\n                            const sentenceTokens = sentence.length / 4;\n                            if (currentChunk.length / 4 + sentenceTokens <= maxTokens) {\n                                currentChunk += (currentChunk ? ' ' : '') + sentence;\n                            } else {\n                                if (currentChunk) {\n                                    chunks.push(currentChunk.trim());\n                                }\n                                currentChunk = sentence;\n                            }\n                        });\n                        if (currentChunk) {\n                            chunks.push(currentChunk.trim());\n                        }\n                    } else {\n                        currentChunk = paragraph;\n                    }\n                }\n            });\n            if (currentChunk) {\n                chunks.push(currentChunk.trim());\n            }\n        }\n    });\n    // Filter out any empty chunks\n    return chunks.filter((chunk)=>chunk.trim().length > 0);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9jaHVua01hcmtkb3duLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLFNBQVNBLGNBQWNDLFlBQVksRUFBRUMsWUFBWSxHQUFHO0lBQ3pELElBQUksQ0FBQ0QsY0FBYyxPQUFPLEVBQUU7SUFFNUIsNkNBQTZDO0lBQzdDLE1BQU1FLGVBQWU7SUFDckIsSUFBSUMsV0FBV0gsYUFBYUksS0FBSyxDQUFDRjtJQUVsQywrQkFBK0I7SUFDL0IsTUFBTUcsU0FBUyxFQUFFO0lBRWpCRixTQUFTRyxPQUFPLENBQUNDLENBQUFBO1FBQ2YsNkRBQTZEO1FBQzdELE1BQU1DLGtCQUFrQkQsUUFBUUUsTUFBTSxHQUFHO1FBRXpDLElBQUlELG1CQUFtQlAsV0FBVztZQUNoQ0ksT0FBT0ssSUFBSSxDQUFDSCxRQUFRSSxJQUFJO1FBQzFCLE9BQU87WUFDTCx5Q0FBeUM7WUFDekMsTUFBTUMsYUFBYUwsUUFBUUgsS0FBSyxDQUFDO1lBQ2pDLElBQUlTLGVBQWU7WUFFbkJELFdBQVdOLE9BQU8sQ0FBQ1EsQ0FBQUE7Z0JBQ2pCLE1BQU1DLGtCQUFrQkQsVUFBVUwsTUFBTSxHQUFHO2dCQUUzQyxJQUFJLGFBQWNBLE1BQU0sR0FBRyxJQUFLTSxtQkFBbUJkLFdBQVc7b0JBQzVEWSxnQkFBZ0IsQ0FBQ0EsZUFBZSxTQUFTLEVBQUMsSUFBS0M7Z0JBQ2pELE9BQU87b0JBQ0wsSUFBSUQsY0FBYzt3QkFDaEJSLE9BQU9LLElBQUksQ0FBQ0csYUFBYUYsSUFBSTtvQkFDL0I7b0JBRUEsdURBQXVEO29CQUN2RCxJQUFJSSxrQkFBa0JkLFdBQVc7d0JBQy9CLE1BQU1lLFlBQVlGLFVBQVVWLEtBQUssQ0FBQzt3QkFDbENTLGVBQWU7d0JBRWZHLFVBQVVWLE9BQU8sQ0FBQ1csQ0FBQUE7NEJBQ2hCLE1BQU1DLGlCQUFpQkQsU0FBU1IsTUFBTSxHQUFHOzRCQUV6QyxJQUFJLGFBQWNBLE1BQU0sR0FBRyxJQUFLUyxrQkFBa0JqQixXQUFXO2dDQUMzRFksZ0JBQWdCLENBQUNBLGVBQWUsTUFBTSxFQUFDLElBQUtJOzRCQUM5QyxPQUFPO2dDQUNMLElBQUlKLGNBQWM7b0NBQ2hCUixPQUFPSyxJQUFJLENBQUNHLGFBQWFGLElBQUk7Z0NBQy9CO2dDQUNBRSxlQUFlSTs0QkFDakI7d0JBQ0Y7d0JBRUEsSUFBSUosY0FBYzs0QkFDaEJSLE9BQU9LLElBQUksQ0FBQ0csYUFBYUYsSUFBSTt3QkFDL0I7b0JBQ0YsT0FBTzt3QkFDTEUsZUFBZUM7b0JBQ2pCO2dCQUNGO1lBQ0Y7WUFFQSxJQUFJRCxjQUFjO2dCQUNoQlIsT0FBT0ssSUFBSSxDQUFDRyxhQUFhRixJQUFJO1lBQy9CO1FBQ0Y7SUFDRjtJQUVBLDhCQUE4QjtJQUM5QixPQUFPTixPQUFPYyxNQUFNLENBQUNDLENBQUFBLFFBQVNBLE1BQU1ULElBQUksR0FBR0YsTUFBTSxHQUFHO0FBQ3REIiwic291cmNlcyI6WyIvaG9tZS9paWl0ZC9vcmVraS9sbG1kb2NzLXIvcmFnLWFwcC9saWIvY2h1bmtNYXJrZG93bi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENodW5rcyBtYXJrZG93biB0ZXh0IGludG8gc21hbGxlciBzZWdtZW50cyBiYXNlZCBvbiB0b2tlbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNodW5rTWFya2Rvd24obWFya2Rvd25UZXh0LCBtYXhUb2tlbnMgPSA1MDApIHtcbiAgaWYgKCFtYXJrZG93blRleHQpIHJldHVybiBbXTtcblxuICAvLyBTcGxpdCBieSBoZWFkaW5ncyB0byBjcmVhdGUgbmF0dXJhbCBicmVha3NcbiAgY29uc3QgaGVhZGluZ1JlZ2V4ID0gLyg/PV4jezEsNn1cXHMuKyQpL2dtO1xuICBsZXQgc2VnbWVudHMgPSBtYXJrZG93blRleHQuc3BsaXQoaGVhZGluZ1JlZ2V4KTtcblxuICAvLyBGdXJ0aGVyIHNwbGl0IGxhcmdlIHNlZ21lbnRzXG4gIGNvbnN0IGNodW5rcyA9IFtdO1xuICBcbiAgc2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICAvLyBFc3RpbWF0ZSB0b2tlbnMgLSByb3VnaCBhcHByb3hpbWF0aW9uICgxIHRva2VuIH49IDQgY2hhcnMpXG4gICAgY29uc3QgZXN0aW1hdGVkVG9rZW5zID0gc2VnbWVudC5sZW5ndGggLyA0O1xuICAgIFxuICAgIGlmIChlc3RpbWF0ZWRUb2tlbnMgPD0gbWF4VG9rZW5zKSB7XG4gICAgICBjaHVua3MucHVzaChzZWdtZW50LnRyaW0oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNwbGl0IGJ5IHBhcmFncmFwaHMgZm9yIGxhcmdlIHNlZ21lbnRzXG4gICAgICBjb25zdCBwYXJhZ3JhcGhzID0gc2VnbWVudC5zcGxpdCgvXFxuXFxzKlxcbi8pO1xuICAgICAgbGV0IGN1cnJlbnRDaHVuayA9ICcnO1xuICAgICAgXG4gICAgICBwYXJhZ3JhcGhzLmZvckVhY2gocGFyYWdyYXBoID0+IHtcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoVG9rZW5zID0gcGFyYWdyYXBoLmxlbmd0aCAvIDQ7XG4gICAgICAgIFxuICAgICAgICBpZiAoKGN1cnJlbnRDaHVuay5sZW5ndGggLyA0KSArIHBhcmFncmFwaFRva2VucyA8PSBtYXhUb2tlbnMpIHtcbiAgICAgICAgICBjdXJyZW50Q2h1bmsgKz0gKGN1cnJlbnRDaHVuayA/ICdcXG5cXG4nIDogJycpICsgcGFyYWdyYXBoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjdXJyZW50Q2h1bmspIHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKGN1cnJlbnRDaHVuay50cmltKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBJZiBhIHNpbmdsZSBwYXJhZ3JhcGggaXMgdG9vIGxhcmdlLCBzcGxpdCBpdCBmdXJ0aGVyXG4gICAgICAgICAgaWYgKHBhcmFncmFwaFRva2VucyA+IG1heFRva2Vucykge1xuICAgICAgICAgICAgY29uc3Qgc2VudGVuY2VzID0gcGFyYWdyYXBoLnNwbGl0KC8oPzw9XFwufFxcP3xcXCEpXFxzKy8pO1xuICAgICAgICAgICAgY3VycmVudENodW5rID0gJyc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlbnRlbmNlcy5mb3JFYWNoKHNlbnRlbmNlID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc2VudGVuY2VUb2tlbnMgPSBzZW50ZW5jZS5sZW5ndGggLyA0O1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWYgKChjdXJyZW50Q2h1bmsubGVuZ3RoIC8gNCkgKyBzZW50ZW5jZVRva2VucyA8PSBtYXhUb2tlbnMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2h1bmsgKz0gKGN1cnJlbnRDaHVuayA/ICcgJyA6ICcnKSArIHNlbnRlbmNlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2h1bmspIHtcbiAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKGN1cnJlbnRDaHVuay50cmltKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50Q2h1bmsgPSBzZW50ZW5jZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChjdXJyZW50Q2h1bmspIHtcbiAgICAgICAgICAgICAgY2h1bmtzLnB1c2goY3VycmVudENodW5rLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRDaHVuayA9IHBhcmFncmFwaDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBpZiAoY3VycmVudENodW5rKSB7XG4gICAgICAgIGNodW5rcy5wdXNoKGN1cnJlbnRDaHVuay50cmltKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBGaWx0ZXIgb3V0IGFueSBlbXB0eSBjaHVua3NcbiAgcmV0dXJuIGNodW5rcy5maWx0ZXIoY2h1bmsgPT4gY2h1bmsudHJpbSgpLmxlbmd0aCA+IDApO1xufSJdLCJuYW1lcyI6WyJjaHVua01hcmtkb3duIiwibWFya2Rvd25UZXh0IiwibWF4VG9rZW5zIiwiaGVhZGluZ1JlZ2V4Iiwic2VnbWVudHMiLCJzcGxpdCIsImNodW5rcyIsImZvckVhY2giLCJzZWdtZW50IiwiZXN0aW1hdGVkVG9rZW5zIiwibGVuZ3RoIiwicHVzaCIsInRyaW0iLCJwYXJhZ3JhcGhzIiwiY3VycmVudENodW5rIiwicGFyYWdyYXBoIiwicGFyYWdyYXBoVG9rZW5zIiwic2VudGVuY2VzIiwic2VudGVuY2UiLCJzZW50ZW5jZVRva2VucyIsImZpbHRlciIsImNodW5rIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./lib/chunkMarkdown.ts\n");

/***/ }),

/***/ "(api-node)/./lib/embed.ts":
/*!**********************!*\
  !*** ./lib/embed.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeCosineSimilarity: () => (/* binding */ computeCosineSimilarity),\n/* harmony export */   getEmbedding: () => (/* binding */ getEmbedding)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__]);\n_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * Generates embeddings for text using the Gemini Embeddings API\n */ \n// Initialize the Google Generative AI with your API key\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');\n// Get the embedding model\nconst embeddingModel = genAI.getGenerativeModel({\n    model: \"embedding-001\"\n});\nasync function getEmbedding(text) {\n    try {\n        const result = await embeddingModel.embedContent(text);\n        const embedding = result.embedding.values;\n        return embedding;\n    } catch (error) {\n        console.error('Error generating embedding:', error);\n        throw new Error('Failed to generate embedding');\n    }\n}\n/**\n * Computes cosine similarity between two vectors\n */ function computeCosineSimilarity(vecA, vecB) {\n    if (!vecA || !vecB || vecA.length !== vecB.length) {\n        throw new Error('Vectors must have the same dimensions');\n    }\n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n    for(let i = 0; i < vecA.length; i++){\n        dotProduct += vecA[i] * vecB[i];\n        normA += vecA[i] * vecA[i];\n        normB += vecB[i] * vecB[i];\n    }\n    normA = Math.sqrt(normA);\n    normB = Math.sqrt(normB);\n    if (normA === 0 || normB === 0) {\n        return 0;\n    }\n    return dotProduct / (normA * normB);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9lbWJlZC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUMwRDtBQUUzRCx3REFBd0Q7QUFDeEQsTUFBTUMsUUFBUSxJQUFJRCxxRUFBa0JBLENBQUNFLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYyxJQUFJO0FBRW5FLDBCQUEwQjtBQUMxQixNQUFNQyxpQkFBaUJKLE1BQU1LLGtCQUFrQixDQUFDO0lBQUVDLE9BQU87QUFBZ0I7QUFFbEUsZUFBZUMsYUFBYUMsSUFBWTtJQUM3QyxJQUFJO1FBQ0YsTUFBTUMsU0FBUyxNQUFNTCxlQUFlTSxZQUFZLENBQUNGO1FBQ2pELE1BQU1HLFlBQVlGLE9BQU9FLFNBQVMsQ0FBQ0MsTUFBTTtRQUN6QyxPQUFPRDtJQUNULEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxNQUFNLElBQUlFLE1BQU07SUFDbEI7QUFDRjtBQUVBOztDQUVDLEdBQ00sU0FBU0Msd0JBQXdCQyxJQUFjLEVBQUVDLElBQWM7SUFDcEUsSUFBSSxDQUFDRCxRQUFRLENBQUNDLFFBQVFELEtBQUtFLE1BQU0sS0FBS0QsS0FBS0MsTUFBTSxFQUFFO1FBQ2pELE1BQU0sSUFBSUosTUFBTTtJQUNsQjtJQUVBLElBQUlLLGFBQWE7SUFDakIsSUFBSUMsUUFBUTtJQUNaLElBQUlDLFFBQVE7SUFFWixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sS0FBS0UsTUFBTSxFQUFFSSxJQUFLO1FBQ3BDSCxjQUFjSCxJQUFJLENBQUNNLEVBQUUsR0FBR0wsSUFBSSxDQUFDSyxFQUFFO1FBQy9CRixTQUFTSixJQUFJLENBQUNNLEVBQUUsR0FBR04sSUFBSSxDQUFDTSxFQUFFO1FBQzFCRCxTQUFTSixJQUFJLENBQUNLLEVBQUUsR0FBR0wsSUFBSSxDQUFDSyxFQUFFO0lBQzVCO0lBRUFGLFFBQVFHLEtBQUtDLElBQUksQ0FBQ0o7SUFDbEJDLFFBQVFFLEtBQUtDLElBQUksQ0FBQ0g7SUFFbEIsSUFBSUQsVUFBVSxLQUFLQyxVQUFVLEdBQUc7UUFDOUIsT0FBTztJQUNUO0lBRUEsT0FBT0YsYUFBY0MsQ0FBQUEsUUFBUUMsS0FBSTtBQUNuQyIsInNvdXJjZXMiOlsiL2hvbWUvaWlpdGQvb3Jla2kvbGxtZG9jcy1yL3JhZy1hcHAvbGliL2VtYmVkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhdGVzIGVtYmVkZGluZ3MgZm9yIHRleHQgdXNpbmcgdGhlIEdlbWluaSBFbWJlZGRpbmdzIEFQSVxuICovXG5pbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUkgfSBmcm9tICdAZ29vZ2xlL2dlbmVyYXRpdmUtYWknO1xuXG4vLyBJbml0aWFsaXplIHRoZSBHb29nbGUgR2VuZXJhdGl2ZSBBSSB3aXRoIHlvdXIgQVBJIGtleVxuY29uc3QgZ2VuQUkgPSBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJKHByb2Nlc3MuZW52LkdFTUlOSV9BUElfS0VZIHx8ICcnKTtcblxuLy8gR2V0IHRoZSBlbWJlZGRpbmcgbW9kZWxcbmNvbnN0IGVtYmVkZGluZ01vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZW1iZWRkaW5nLTAwMVwiIH0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RW1iZWRkaW5nKHRleHQ6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyW10+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBlbWJlZGRpbmdNb2RlbC5lbWJlZENvbnRlbnQodGV4dCk7XG4gICAgY29uc3QgZW1iZWRkaW5nID0gcmVzdWx0LmVtYmVkZGluZy52YWx1ZXM7XG4gICAgcmV0dXJuIGVtYmVkZGluZztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZzonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgZW1iZWRkaW5nJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb21wdXRlcyBjb3NpbmUgc2ltaWxhcml0eSBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQ29zaW5lU2ltaWxhcml0eSh2ZWNBOiBudW1iZXJbXSwgdmVjQjogbnVtYmVyW10pOiBudW1iZXIge1xuICBpZiAoIXZlY0EgfHwgIXZlY0IgfHwgdmVjQS5sZW5ndGggIT09IHZlY0IubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdWZWN0b3JzIG11c3QgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb25zJyk7XG4gIH1cblxuICBsZXQgZG90UHJvZHVjdCA9IDA7XG4gIGxldCBub3JtQSA9IDA7XG4gIGxldCBub3JtQiA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZWNBLmxlbmd0aDsgaSsrKSB7XG4gICAgZG90UHJvZHVjdCArPSB2ZWNBW2ldICogdmVjQltpXTtcbiAgICBub3JtQSArPSB2ZWNBW2ldICogdmVjQVtpXTtcbiAgICBub3JtQiArPSB2ZWNCW2ldICogdmVjQltpXTtcbiAgfVxuXG4gIG5vcm1BID0gTWF0aC5zcXJ0KG5vcm1BKTtcbiAgbm9ybUIgPSBNYXRoLnNxcnQobm9ybUIpO1xuXG4gIGlmIChub3JtQSA9PT0gMCB8fCBub3JtQiA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIGRvdFByb2R1Y3QgLyAobm9ybUEgKiBub3JtQik7XG59Il0sIm5hbWVzIjpbIkdvb2dsZUdlbmVyYXRpdmVBSSIsImdlbkFJIiwicHJvY2VzcyIsImVudiIsIkdFTUlOSV9BUElfS0VZIiwiZW1iZWRkaW5nTW9kZWwiLCJnZXRHZW5lcmF0aXZlTW9kZWwiLCJtb2RlbCIsImdldEVtYmVkZGluZyIsInRleHQiLCJyZXN1bHQiLCJlbWJlZENvbnRlbnQiLCJlbWJlZGRpbmciLCJ2YWx1ZXMiLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsImNvbXB1dGVDb3NpbmVTaW1pbGFyaXR5IiwidmVjQSIsInZlY0IiLCJsZW5ndGgiLCJkb3RQcm9kdWN0Iiwibm9ybUEiLCJub3JtQiIsImkiLCJNYXRoIiwic3FydCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/embed.ts\n");

/***/ }),

/***/ "(api-node)/./lib/rag.ts":
/*!********************!*\
  !*** ./lib/rag.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRAGStatus: () => (/* binding */ getRAGStatus),\n/* harmony export */   initializeRAG: () => (/* binding */ initializeRAG),\n/* harmony export */   queryRAG: () => (/* binding */ queryRAG)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\n/* harmony import */ var _embed__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embed */ \"(api-node)/./lib/embed.ts\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__, _embed__WEBPACK_IMPORTED_MODULE_1__]);\n([_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__, _embed__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// Initialize the Google Generative AI with your API key\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');\n// Path to store embedded chunks\nconst embeddingsFilePath = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), 'data', 'embeddings.json');\n// Create a global in-memory store for our embedded chunks\n// Format: { id: string, text: string, embedding: number[] }[]\nlet embeddedChunks = [];\n// Load embeddings from file if they exist\ntry {\n    if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(embeddingsFilePath)) {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(embeddingsFilePath, 'utf-8');\n        embeddedChunks = JSON.parse(data);\n        console.log(`Loaded ${embeddedChunks.length} embedded chunks from disk`);\n    }\n} catch (error) {\n    console.error('Error loading embeddings from disk:', error);\n    embeddedChunks = [];\n}\n/**\n * Save the current embeddings to disk\n */ function saveEmbeddingsToDisk() {\n    try {\n        const dataDir = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), 'data');\n        if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dataDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(dataDir, {\n                recursive: true\n            });\n        }\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(embeddingsFilePath, JSON.stringify(embeddedChunks), 'utf-8');\n        console.log(`Saved ${embeddedChunks.length} embedded chunks to disk`);\n    } catch (error) {\n        console.error('Error saving embeddings to disk:', error);\n    }\n}\nasync function initializeRAG(chunks) {\n    try {\n        console.log(`Initializing RAG with ${chunks.length} chunks`);\n        embeddedChunks = [];\n        // Process chunks in batches to avoid rate limiting issues\n        const batchSize = 10;\n        for(let i = 0; i < chunks.length; i += batchSize){\n            const batch = chunks.slice(i, i + batchSize);\n            // Process batch in parallel\n            const batchPromises = batch.map(async (chunk, index)=>{\n                const embedding = await (0,_embed__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(chunk);\n                return {\n                    id: `chunk-${i + index}`,\n                    text: chunk,\n                    embedding\n                };\n            });\n            const batchResults = await Promise.all(batchPromises);\n            embeddedChunks.push(...batchResults);\n            // Simple progress logging\n            console.log(`Embedded ${Math.min(i + batchSize, chunks.length)}/${chunks.length} chunks`);\n            // Add a small delay between batches to avoid rate limiting\n            if (i + batchSize < chunks.length) {\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n            }\n        }\n        // Save embeddings to disk after initialization\n        saveEmbeddingsToDisk();\n        console.log('RAG initialization complete');\n        return true;\n    } catch (error) {\n        console.error('Error initializing RAG:', error);\n        throw new Error('Failed to initialize RAG');\n    }\n}\nasync function queryRAG(question, topK = 3) {\n    try {\n        if (embeddedChunks.length === 0) {\n            throw new Error('RAG system not initialized with content');\n        }\n        // Get embedding for the question\n        const questionEmbedding = await (0,_embed__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(question);\n        // Calculate similarity scores for all chunks\n        const scoredChunks = embeddedChunks.map((chunk)=>({\n                ...chunk,\n                score: (0,_embed__WEBPACK_IMPORTED_MODULE_1__.computeCosineSimilarity)(questionEmbedding, chunk.embedding)\n            }));\n        // Sort by similarity score (descending) and take top K\n        const topChunks = scoredChunks.sort((a, b)=>b.score - a.score).slice(0, topK);\n        // Extract just the text from the top chunks\n        const relevantContext = topChunks.map((chunk)=>chunk.text).join(\"\\n\\n\");\n        // Get the Gemini model for generating responses\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash-lite-preview-02-05\"\n        });\n        // Create the prompt with context and question\n        const prompt = `You are a helpful assistant. Use the following documentation context to answer the question.\n\nContext:\n${relevantContext}\n\nQuestion:\n${question}\n\nIf the answer cannot be found in the context, say \"I don't have enough information to answer that question based on the provided documentation.\"`;\n        // Generate a response\n        const result = await model.generateContent(prompt);\n        const response = result.response.text();\n        return {\n            response,\n            usedChunks: topChunks.map((chunk)=>({\n                    id: chunk.id,\n                    text: chunk.text\n                }))\n        };\n    } catch (error) {\n        console.error('Error querying RAG:', error);\n        throw new Error('Failed to query RAG');\n    }\n}\nfunction getRAGStatus() {\n    // Add logging to help debug the initialization state\n    console.log(`RAG status check: ${embeddedChunks.length} chunks loaded, initialized: ${embeddedChunks.length > 0}`);\n    return {\n        initialized: embeddedChunks.length > 0,\n        chunkCount: embeddedChunks.length\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/rag.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fupload.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fupload.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_upload_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/upload.ts */ \"(api-node)/./pages/api/upload.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_upload_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_upload_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_upload_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_upload_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/upload\",\n        pathname: \"/api/upload\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_upload_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGdXBsb2FkJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZ1cGxvYWQudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDa0Q7QUFDbEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGlEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxpREFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS91cGxvYWQudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3VwbG9hZFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VwbG9hZFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fupload.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/upload.ts":
/*!*****************************!*\
  !*** ./pages/api/upload.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_chunkMarkdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/chunkMarkdown */ \"(api-node)/./lib/chunkMarkdown.ts\");\n/* harmony import */ var _lib_rag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/rag */ \"(api-node)/./lib/rag.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_rag__WEBPACK_IMPORTED_MODULE_4__]);\n_lib_rag__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n// Ensure data directory exists\nconst dataDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'data');\nif (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(dataDir)) {\n    fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(dataDir, {\n        recursive: true\n    });\n}\n// Maximum number of chunks to process\nconst MAX_CHUNKS = 750;\nconst contextPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(dataDir, 'context.md');\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        const { url } = req.body;\n        if (!url) {\n            return res.status(400).json({\n                message: 'URL is required'\n            });\n        }\n        // Clear previous markdown file if it exists\n        if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(contextPath)) {\n            fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(contextPath, '');\n        }\n        // Run the Python script with the URL as an argument\n        // Updated path to point within the project's scripts directory\n        const pythonScriptPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'scripts', 'scrape_to_md.py');\n        console.log(`Starting Python script: ${pythonScriptPath}`);\n        console.log(`Processing URL: ${url}`);\n        // Execute the Python script as a child process\n        const pythonProcess = (0,child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)('python', [\n            pythonScriptPath,\n            url,\n            contextPath\n        ]);\n        let scriptOutput = '';\n        let scriptError = '';\n        pythonProcess.stdout.on('data', (data)=>{\n            scriptOutput += data.toString();\n            console.log(`Python script output: ${data}`);\n        });\n        pythonProcess.stderr.on('data', (data)=>{\n            scriptError += data.toString();\n            console.error(`Python script error: ${data}`);\n        });\n        // Wait for the Python script to complete\n        const exitCode = await new Promise((resolve)=>{\n            pythonProcess.on('close', resolve);\n        });\n        if (exitCode !== 0) {\n            console.error(`Python script exited with code ${exitCode}`);\n            console.error(`Error output: ${scriptError}`);\n            return res.status(500).json({\n                message: 'Failed to process the URL',\n                error: scriptError || 'Unknown error'\n            });\n        }\n        // Read the generated markdown file\n        if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(contextPath)) {\n            return res.status(500).json({\n                message: 'Failed to generate markdown content',\n                error: 'Markdown file not found'\n            });\n        }\n        const markdownContent = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(contextPath, 'utf-8');\n        if (!markdownContent || markdownContent.trim().length === 0) {\n            return res.status(500).json({\n                message: 'Failed to generate markdown content',\n                error: 'Generated markdown is empty'\n            });\n        }\n        console.log(`Successfully generated markdown (${markdownContent.length} characters)`);\n        // Chunk the markdown content\n        let chunks = (0,_lib_chunkMarkdown__WEBPACK_IMPORTED_MODULE_3__.chunkMarkdown)(markdownContent);\n        console.log(`Split markdown into ${chunks.length} chunks`);\n        // Limit the number of chunks to process\n        if (chunks.length > MAX_CHUNKS) {\n            console.log(`Limiting chunks from ${chunks.length} to ${MAX_CHUNKS}`);\n            chunks = chunks.slice(0, MAX_CHUNKS);\n        }\n        // Initialize the RAG system with the chunks\n        await (0,_lib_rag__WEBPACK_IMPORTED_MODULE_4__.initializeRAG)(chunks);\n        // Return success response\n        return res.status(200).json({\n            message: 'URL processed successfully',\n            chunkCount: chunks.length,\n            limitApplied: chunks.length === MAX_CHUNKS\n        });\n    } catch (error) {\n        console.error('Error processing URL:', error);\n        return res.status(500).json({\n            message: 'Failed to process the URL',\n            error: error.message || 'Unknown error'\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/upload.ts\n");

/***/ }),

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fupload.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();